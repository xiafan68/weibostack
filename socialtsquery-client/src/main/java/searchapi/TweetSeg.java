/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package searchapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-02-11")
public class TweetSeg implements org.apache.thrift.TBase<TweetSeg, TweetSeg._Fields>, java.io.Serializable, Cloneable, Comparable<TweetSeg> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TweetSeg");

  private static final org.apache.thrift.protocol.TField MID_FIELD_DESC = new org.apache.thrift.protocol.TField("mid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField STARTTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("starttime", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField STARTCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("startcount", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ENDTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endtime", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField ENDCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("endcount", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TweetSegStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TweetSegTupleSchemeFactory());
  }

  public String mid; // required
  public int starttime; // required
  public int startcount; // required
  public int endtime; // required
  public int endcount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MID((short)1, "mid"),
    STARTTIME((short)2, "starttime"),
    STARTCOUNT((short)3, "startcount"),
    ENDTIME((short)4, "endtime"),
    ENDCOUNT((short)5, "endcount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MID
          return MID;
        case 2: // STARTTIME
          return STARTTIME;
        case 3: // STARTCOUNT
          return STARTCOUNT;
        case 4: // ENDTIME
          return ENDTIME;
        case 5: // ENDCOUNT
          return ENDCOUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STARTTIME_ISSET_ID = 0;
  private static final int __STARTCOUNT_ISSET_ID = 1;
  private static final int __ENDTIME_ISSET_ID = 2;
  private static final int __ENDCOUNT_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MID, new org.apache.thrift.meta_data.FieldMetaData("mid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STARTTIME, new org.apache.thrift.meta_data.FieldMetaData("starttime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STARTCOUNT, new org.apache.thrift.meta_data.FieldMetaData("startcount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ENDTIME, new org.apache.thrift.meta_data.FieldMetaData("endtime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ENDCOUNT, new org.apache.thrift.meta_data.FieldMetaData("endcount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TweetSeg.class, metaDataMap);
  }

  public TweetSeg() {
  }

  public TweetSeg(
    String mid,
    int starttime,
    int startcount,
    int endtime,
    int endcount)
  {
    this();
    this.mid = mid;
    this.starttime = starttime;
    setStarttimeIsSet(true);
    this.startcount = startcount;
    setStartcountIsSet(true);
    this.endtime = endtime;
    setEndtimeIsSet(true);
    this.endcount = endcount;
    setEndcountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TweetSeg(TweetSeg other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetMid()) {
      this.mid = other.mid;
    }
    this.starttime = other.starttime;
    this.startcount = other.startcount;
    this.endtime = other.endtime;
    this.endcount = other.endcount;
  }

  public TweetSeg deepCopy() {
    return new TweetSeg(this);
  }

  @Override
  public void clear() {
    this.mid = null;
    setStarttimeIsSet(false);
    this.starttime = 0;
    setStartcountIsSet(false);
    this.startcount = 0;
    setEndtimeIsSet(false);
    this.endtime = 0;
    setEndcountIsSet(false);
    this.endcount = 0;
  }

  public String getMid() {
    return this.mid;
  }

  public TweetSeg setMid(String mid) {
    this.mid = mid;
    return this;
  }

  public void unsetMid() {
    this.mid = null;
  }

  /** Returns true if field mid is set (has been assigned a value) and false otherwise */
  public boolean isSetMid() {
    return this.mid != null;
  }

  public void setMidIsSet(boolean value) {
    if (!value) {
      this.mid = null;
    }
  }

  public int getStarttime() {
    return this.starttime;
  }

  public TweetSeg setStarttime(int starttime) {
    this.starttime = starttime;
    setStarttimeIsSet(true);
    return this;
  }

  public void unsetStarttime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  /** Returns true if field starttime is set (has been assigned a value) and false otherwise */
  public boolean isSetStarttime() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  public void setStarttimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
  }

  public int getStartcount() {
    return this.startcount;
  }

  public TweetSeg setStartcount(int startcount) {
    this.startcount = startcount;
    setStartcountIsSet(true);
    return this;
  }

  public void unsetStartcount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTCOUNT_ISSET_ID);
  }

  /** Returns true if field startcount is set (has been assigned a value) and false otherwise */
  public boolean isSetStartcount() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTCOUNT_ISSET_ID);
  }

  public void setStartcountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTCOUNT_ISSET_ID, value);
  }

  public int getEndtime() {
    return this.endtime;
  }

  public TweetSeg setEndtime(int endtime) {
    this.endtime = endtime;
    setEndtimeIsSet(true);
    return this;
  }

  public void unsetEndtime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  /** Returns true if field endtime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndtime() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  public void setEndtimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
  }

  public int getEndcount() {
    return this.endcount;
  }

  public TweetSeg setEndcount(int endcount) {
    this.endcount = endcount;
    setEndcountIsSet(true);
    return this;
  }

  public void unsetEndcount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDCOUNT_ISSET_ID);
  }

  /** Returns true if field endcount is set (has been assigned a value) and false otherwise */
  public boolean isSetEndcount() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDCOUNT_ISSET_ID);
  }

  public void setEndcountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDCOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MID:
      if (value == null) {
        unsetMid();
      } else {
        setMid((String)value);
      }
      break;

    case STARTTIME:
      if (value == null) {
        unsetStarttime();
      } else {
        setStarttime((Integer)value);
      }
      break;

    case STARTCOUNT:
      if (value == null) {
        unsetStartcount();
      } else {
        setStartcount((Integer)value);
      }
      break;

    case ENDTIME:
      if (value == null) {
        unsetEndtime();
      } else {
        setEndtime((Integer)value);
      }
      break;

    case ENDCOUNT:
      if (value == null) {
        unsetEndcount();
      } else {
        setEndcount((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MID:
      return getMid();

    case STARTTIME:
      return getStarttime();

    case STARTCOUNT:
      return getStartcount();

    case ENDTIME:
      return getEndtime();

    case ENDCOUNT:
      return getEndcount();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MID:
      return isSetMid();
    case STARTTIME:
      return isSetStarttime();
    case STARTCOUNT:
      return isSetStartcount();
    case ENDTIME:
      return isSetEndtime();
    case ENDCOUNT:
      return isSetEndcount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TweetSeg)
      return this.equals((TweetSeg)that);
    return false;
  }

  public boolean equals(TweetSeg that) {
    if (that == null)
      return false;

    boolean this_present_mid = true && this.isSetMid();
    boolean that_present_mid = true && that.isSetMid();
    if (this_present_mid || that_present_mid) {
      if (!(this_present_mid && that_present_mid))
        return false;
      if (!this.mid.equals(that.mid))
        return false;
    }

    boolean this_present_starttime = true;
    boolean that_present_starttime = true;
    if (this_present_starttime || that_present_starttime) {
      if (!(this_present_starttime && that_present_starttime))
        return false;
      if (this.starttime != that.starttime)
        return false;
    }

    boolean this_present_startcount = true;
    boolean that_present_startcount = true;
    if (this_present_startcount || that_present_startcount) {
      if (!(this_present_startcount && that_present_startcount))
        return false;
      if (this.startcount != that.startcount)
        return false;
    }

    boolean this_present_endtime = true;
    boolean that_present_endtime = true;
    if (this_present_endtime || that_present_endtime) {
      if (!(this_present_endtime && that_present_endtime))
        return false;
      if (this.endtime != that.endtime)
        return false;
    }

    boolean this_present_endcount = true;
    boolean that_present_endcount = true;
    if (this_present_endcount || that_present_endcount) {
      if (!(this_present_endcount && that_present_endcount))
        return false;
      if (this.endcount != that.endcount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_mid = true && (isSetMid());
    list.add(present_mid);
    if (present_mid)
      list.add(mid);

    boolean present_starttime = true;
    list.add(present_starttime);
    if (present_starttime)
      list.add(starttime);

    boolean present_startcount = true;
    list.add(present_startcount);
    if (present_startcount)
      list.add(startcount);

    boolean present_endtime = true;
    list.add(present_endtime);
    if (present_endtime)
      list.add(endtime);

    boolean present_endcount = true;
    list.add(present_endcount);
    if (present_endcount)
      list.add(endcount);

    return list.hashCode();
  }

  @Override
  public int compareTo(TweetSeg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMid()).compareTo(other.isSetMid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mid, other.mid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStarttime()).compareTo(other.isSetStarttime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStarttime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.starttime, other.starttime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartcount()).compareTo(other.isSetStartcount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartcount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startcount, other.startcount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndtime()).compareTo(other.isSetEndtime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndtime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endtime, other.endtime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndcount()).compareTo(other.isSetEndcount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndcount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endcount, other.endcount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TweetSeg(");
    boolean first = true;

    sb.append("mid:");
    if (this.mid == null) {
      sb.append("null");
    } else {
      sb.append(this.mid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("starttime:");
    sb.append(this.starttime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startcount:");
    sb.append(this.startcount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endtime:");
    sb.append(this.endtime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endcount:");
    sb.append(this.endcount);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TweetSegStandardSchemeFactory implements SchemeFactory {
    public TweetSegStandardScheme getScheme() {
      return new TweetSegStandardScheme();
    }
  }

  private static class TweetSegStandardScheme extends StandardScheme<TweetSeg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TweetSeg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mid = iprot.readString();
              struct.setMidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STARTTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.starttime = iprot.readI32();
              struct.setStarttimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STARTCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.startcount = iprot.readI32();
              struct.setStartcountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ENDTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.endtime = iprot.readI32();
              struct.setEndtimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ENDCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.endcount = iprot.readI32();
              struct.setEndcountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TweetSeg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.mid != null) {
        oprot.writeFieldBegin(MID_FIELD_DESC);
        oprot.writeString(struct.mid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STARTTIME_FIELD_DESC);
      oprot.writeI32(struct.starttime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STARTCOUNT_FIELD_DESC);
      oprot.writeI32(struct.startcount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ENDTIME_FIELD_DESC);
      oprot.writeI32(struct.endtime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ENDCOUNT_FIELD_DESC);
      oprot.writeI32(struct.endcount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TweetSegTupleSchemeFactory implements SchemeFactory {
    public TweetSegTupleScheme getScheme() {
      return new TweetSegTupleScheme();
    }
  }

  private static class TweetSegTupleScheme extends TupleScheme<TweetSeg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TweetSeg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMid()) {
        optionals.set(0);
      }
      if (struct.isSetStarttime()) {
        optionals.set(1);
      }
      if (struct.isSetStartcount()) {
        optionals.set(2);
      }
      if (struct.isSetEndtime()) {
        optionals.set(3);
      }
      if (struct.isSetEndcount()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetMid()) {
        oprot.writeString(struct.mid);
      }
      if (struct.isSetStarttime()) {
        oprot.writeI32(struct.starttime);
      }
      if (struct.isSetStartcount()) {
        oprot.writeI32(struct.startcount);
      }
      if (struct.isSetEndtime()) {
        oprot.writeI32(struct.endtime);
      }
      if (struct.isSetEndcount()) {
        oprot.writeI32(struct.endcount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TweetSeg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.mid = iprot.readString();
        struct.setMidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.starttime = iprot.readI32();
        struct.setStarttimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.startcount = iprot.readI32();
        struct.setStartcountIsSet(true);
      }
      if (incoming.get(3)) {
        struct.endtime = iprot.readI32();
        struct.setEndtimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.endcount = iprot.readI32();
        struct.setEndcountIsSet(true);
      }
    }
  }

}

